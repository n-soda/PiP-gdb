# $RIKEN_copyright: 2018 Riken Center for Computational Sceience,
# 	  System Software Devlopment Team. All rights researved$
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

if { [skip_pip_tests] } { return -1 }

set testfile    pip
set executable  gdb_test
set executable2 sleep
set srcfile     ${srcdir}/${subdir}/${executable}.c
set srcfile2    ${srcdir}/${subdir}/${executable2}.c
set binfile     ${objdir}/${subdir}/${executable}
set binfile2    ${objdir}/${subdir}/${executable2}
set flags	[concat "debug" [list "additional_flags=${pipcc_flags}" ]]

if { [gdb_compile ${srcfile}  ${binfile} executable "${flags}" ] != ""} {
    untested "Could not compile ${binfile} w/ ${flags}."
    return -1
}

if { [gdb_compile ${srcfile2} ${binfile2} executable "${flags}"] != "" } {
    untested "Could not compile ${binfile2} w/ ${flags}."
    return -1
}
# PiP-v1 does not have unpie
if { [ file exists ${pip_unpie} ] == 1 } then {
    exec ${pip_unpie} ${binfile2}
}

set escapedsrcfile  [string_to_regexp ${srcfile}]
set escapedsrcfile2 [string_to_regexp ${srcfile2}]
set escapedbinfile  [string_to_regexp ${binfile}]
set escapedbinfile2 [string_to_regexp ${binfile2}]

#exec sh -c "ps -axw | grep $binfile | gawk '{ if (\$5 == \"$binfile\" ) print \$1; }' | while read pid; do kill -9 \$pid; done"

set env(PIP_MODE) process
set rootpid [eval exec $binfile &]

# The process must be spawned.
exec sleep 5

#set taskpid [ exec ps -axw | grep $binfile | gawk "{ if (\$1 != $rootpid && \$5 == \"$binfile\" ) pid=\$1 } END { print pid }" ]
set taskpid [ exec ${pips} x --family --task $rootpid | gawk "{ pid=\$1 } END { print pid }" ]

set use_gdb_stub 0
set timeout 120
global gdb_prompt
set gdb_prompt "\[(\]pip-gdb\[)\]"

set test "attach to PIP task"

gdb_exit
gdb_start

# gdb_test "set pip-auto-attach on" ""

# Attach test.
gdb_test "attach ${taskpid}" ".*Attaching to process $taskpid.*"

# print test.
gdb_test "print test" "= 20"

# backtrace test.
gdb_test "backtrace" "main ().*"

# "info inferiors" test
gdb_test "info inferiors" "2 .* process .* \\(pip root\\) *${escapedbinfile}.*"

# switching inferior 2
gdb_test "inferior 2" "Switching to inferior 2 \\\[process \[0-9\]* \\(pip root\\)\\\] \\(${escapedbinfile}\\)\\\].*"

# switching inferior 1
gdb_test "inferior 1" "Switching to inferior 1 \\\[process \[0-9\]* \\(pip 0\\)\\\] \\(.*${subdir}/${executable2}\\)\\\].*"

# breakpoint test.
gdb_test "break foo" "Breakpoint 1 at 0x\[0-9a-f]*: file ${escapedsrcfile2},.*" "break 1"

# delete test.
gdb_test "delete 1" ""
gdb_test "info breakpoints" "No breakpoints or watchpoints."
gdb_test "break foo" "Breakpoint 2 at 0x\[0-9a-f]*: file ${escapedsrcfile2},.*" "break 2"

# continue test.
gdb_test "continue" "Continuing.*"

# list test.
gdb_test "list" "printf\\(\"Bar\\.\\.\\.\\\\n\"\\);.*"

# next test.
gdb_test "next" "printf\\(\"Bar.*" "next1"
gdb_test "next" "}.*" "next2"
gdb_test "next" "printf\\(\"Done.*" "next3"
gdb_test "next" "return 0;.*" "next4"
gdb_test "next" "}.*" "next5"
gdb_test "next" "in \\?\\? \\(\\).*" "next6"
gdb_test "next" "Cannot find bounds of current function" "next7"

# Detach test.
gdb_test "detach" "process $taskpid.*"

# switching inferior 2 - take 2
gdb_test "inferior 2" "Switching to inferior 2 \\\[process \[0-9\]* \\(pip root\\)\\\] \\(${escapedbinfile}\\)\\\].*" "inferior 2 - 2"

# The process must be terminated
exec sleep 10
catch { exec -ignorestderr -- ${pips} x -f -k $rootpid }

return 0

